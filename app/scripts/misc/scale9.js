// Generated by CoffeeScript 1.7.1
(function() {
  var Scale9;

  Scale9 = (function() {
    function Scale9(image, x, y, width, height) {
      this.image = image;
      this.setRect(x, y, width, height);
      this.resize(this.image.width, this.image.height);
    }

    Scale9.prototype.setRect = function(rectX, rectY, rectW, rectH) {
      this.rectX = rectX;
      this.rectY = rectY;
      this.rectW = rectW;
      this.rectH = rectH;
    };

    Scale9.prototype.getRect = function() {
      return {
        x: this.rectX,
        y: this.rectY,
        width: this.rectW,
        height: this.rectH
      };
    };

    Scale9.prototype.resize = function(width, height) {
      this.width = width;
      this.height = height;
    };

    Scale9.prototype.scale = function(scaleX, scaleY) {
      if (scaleY == null) {
        scaleY = scaleX;
      }
      return this.resize(Math.ceil(scaleX * this.image.width), Math.ceil(scaleY * this.image.height));
    };

    Scale9.prototype.drawImageTo = function(context, x, y, scale) {
      var bottomH, bottomY, centerH, centerW, centerX, centerY, clipBottomH, clipBottomY, clipRightW, clipRightX, leftW, ratio, rightW, rightX, topH;

      this._validateRect();
      clipRightX = this.rectX + this.rectW;
      leftW = this.rectX;
      rightW = this.image.width - clipRightX;
      centerW = this.width - (leftW + rightW);
      clipRightW = rightW;
      clipBottomY = this.rectY + this.rectH;
      topH = this.rectY;
      bottomH = this.image.height - clipBottomY;
      centerH = this.height - (topH + bottomH);
      clipBottomH = bottomH;
      if (centerW < 0) {
        centerW = 0;
        if (leftW === 0) {
          rightW = this.width;
        } else if (rightW === 0) {
          leftW = this.width;
        } else {
          ratio = leftW / rightW;
          rightW = Math.ceil(this.width / (ratio + 1));
          leftW = this.width - rightW;
        }
      }
      if (centerH < 0) {
        centerH = 0;
        if (topH === 0) {
          bottomH = this.height;
        } else if (bottomH === 0) {
          topH = this.height;
        } else {
          ratio = topH / bottomH;
          bottomH = Math.ceil(this.height / (ratio + 1));
          topH = this.height - bottomH;
        }
      }

      if (scale) {
        var s = function(v) { return Math.round(v * scale); };
        x = s(x);
        y = s(y);
        leftW = s(leftW);
        rightW = s(rightW);
        topH = s(topH);
        bottomH = s(bottomH);
        centerW = s(centerW);
        centerH = s(centerH);
      }

      centerX = x + leftW;
      centerY = y + topH;
      rightX = x + leftW + centerW;
      bottomY = y + topH + centerH;
      if (leftW > 0) {
        if (topH > 0) {
          context.drawImage(this.image, 0, 0, this.rectX, this.rectY, x, y, leftW, topH);
        }
        if (centerH > 0) {
          context.drawImage(this.image, 0, this.rectY, this.rectX, this.rectH, x, centerY, leftW, centerH);
        }
        if (bottomH > 0) {
          context.drawImage(this.image, 0, clipBottomY, this.rectX, clipBottomH, x, bottomY, leftW, bottomH);
        }
      }
      if (centerW > 0) {
        if (topH > 0) {
          context.drawImage(this.image, this.rectX, 0, this.rectW, this.rectY, centerX, y, centerW, topH);
        }
        if (centerH > 0) {
          context.drawImage(this.image, this.rectX, this.rectY, this.rectW, this.rectH, centerX, centerY, centerW, centerH);
        }
        if (bottomH > 0) {
          context.drawImage(this.image, this.rectX, clipBottomY, this.rectW, clipBottomH, centerX, bottomY, centerW, bottomH);
        }
      }
      if (rightW > 0) {
        if (topH > 0) {
          context.drawImage(this.image, clipRightX, 0, clipRightW, this.rectY, rightX, y, rightW, topH);
        }
        if (centerH > 0) {
          context.drawImage(this.image, clipRightX, this.rectY, clipRightW, this.rectH, rightX, centerY, rightW, centerH);
        }
        if (bottomH > 0) {
          return context.drawImage(this.image, clipRightX, clipBottomY, clipRightW, clipBottomH, rightX, bottomY, rightW, bottomH);
        }
      }
    };

    Scale9.prototype._validateRect = function() {
      var maxH, maxW;
      if (this.rectX < 0) {
        this.rectX = 0;
      }
      if (this.rectX > this.image.width) {
        this.rectX = this.image.width;
      }
      if (this.rectY < 0) {
        this.rectY = 0;
      }
      if (this.rectY > this.image.height) {
        this.rectY = this.image.height;
      }
      if (this.rectW < 0) {
        this.rectW = 0;
      }
      maxW = this.image.width - this.rectX;
      if (this.rectW > maxW) {
        this.rectW = maxW;
      }
      if (this.rectH < 0) {
        this.rectH = 0;
      }
      maxH = this.image.height - this.rectY;
      if (this.rectH > maxH) {
        return this.rectH = maxH;
      }
    };

    return Scale9;

  })();

  window.Scale9 = Scale9;

}).call(this);
